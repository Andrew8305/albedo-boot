package com.albedo.java.web.filter;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.web.filter.OncePerRequestFilter;

import com.albedo.java.common.config.AlbedoProperties;
import com.albedo.java.common.security.SecurityUtil;
import com.albedo.java.util.PublicUtil;
import com.albedo.java.util.spring.SpringContextHolder;

/**
 * Filter used to put the CSRF token generated by Spring Security in a cookie for use by AngularJS.
 */
public class CsrfCookieGeneratorFilter extends OncePerRequestFilter {

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        // Spring put the CSRF token in session attribute "_csrf"
        CsrfToken csrfToken = (CsrfToken) request.getAttribute("_csrf");
        // Send the cookie only if the token has changed
        String actualToken = request.getHeader("X-CSRF-TOKEN");
        if (actualToken == null || !actualToken.equals(csrfToken.getToken())) {
            // Session cookie that will be used by AngularJS
            String pCookieName = "CSRF-TOKEN";
            Cookie cookie = new Cookie(pCookieName, csrfToken.getToken());
            cookie.setMaxAge(-1);
            cookie.setHttpOnly(false);
            cookie.setPath("/");
            response.addCookie(cookie);
        }
        String basePath = PublicUtil.toAppendStr(request.getScheme(), "://", request.getServerName(), ":", request.getServerPort(), request.getContextPath());
        request.setAttribute("basePath", basePath);
        String adminPath = SpringContextHolder.getBean(AlbedoProperties.class).getAdminPath();
        request.setAttribute("ctx", PublicUtil.toAppendStr(basePath, adminPath));
        request.setAttribute("assets", PublicUtil.toAppendStr(basePath, "/statics/assets"));
        request.setAttribute("ctxStatic", PublicUtil.toAppendStr(basePath, "/statics/frame"));
        HttpSession session = request.getSession();
        if (session.getAttribute("moduleList") == null && PublicUtil.isNotEmpty(SecurityUtil.getCurrentUserId())) {
            session.setAttribute("moduleList", SecurityUtil.getModuleList());
        }
        filterChain.doFilter(request, response);
    }
}
